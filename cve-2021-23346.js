//############## HTML Parse Stringify ##############//
// https://nvd.nist.gov/vuln/detail/CVE-2021-23346
// Type : Exponential
// Fix : Repair the regex

import express from 'express';
import functionTimeout from 'function-timeout';
import HTML from 'html-parse-stringify';

const router_cve_2021_23346 = express.Router();

router_cve_2021_23346.post('/index', (req, res) => {
  const input = req.body.input;
  var result = HTML.parse(input);
  if (result) {
    res.send(result);
  } else {
    res.status(400).send("Regex did not match");
  }
});

// router_cve_2021_21267.post('/repair', (req, res) => {
//   const input = req.body.input;
//   const regex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|a[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/;
//   result = regex.test(input);
//   if (result) {
//     res.send("Regex matched successfully");
//   } else {
//     res.status(400).send("Regex did not match");
//   }
// });

// const validationSchema1 = {
//   type: 'object',
//   properties: {
//     email: {
//       type: 'string',
//       pattern: 'email' // Uses schema-inspector's built-in email pattern validation
//     }
//   }
// };

// router_cve_2021_21267.post('/timeout', (req, res) => {
//   const input = req.body.input;
//   const data = {
//     email: input
//   };

//   const validateWithTimeout = functionTimeout((callback) => {
//     schemaInspector.validate(validationSchema, data, callback);
//   }, 1000);

//   validateWithTimeout((err, result) => {
//     if (err && err.code === 'ETIMEDOUT') {
//       res.status(408).send("Request timed out");
//     } else if (err) {
//       throw err;
//     } else {
//       // If validation passes, result.valid will be true, otherwise false
//       if (result.valid) {
//         res.send("Regex matched successfully");
//       } else {
//         res.status(400).send("Regex did not match");
//       }
//     }
//   });
// });

// router_cve_2021_21267.post('/alternate_logic', (req, res) => {
//   const input = req.body.input;
//   const schema = z.object({
//     email: z.string().email()
//   });
  
//   try {
//     schema.parse({ email: input });
//     res.send("Email is valid");
//   } catch (e) {
//     res.status(400).send("Invalid email");
//   }
  
// })

export default router_cve_2021_23346;