//############### Schema-Inspector ###############
// https://nvd.nist.gov/vuln/detail/CVE-2021-21267
// Type : Exponential
// Fix : Use a regex with a non-exponential time complexity

import express from 'express';
import functionTimeout from 'function-timeout';
import schemaInspector from 'schema-inspector';
import z from 'zod';

const router_cve_2021_21267 = express.Router();

const validationSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      pattern: 'email' // Uses schema-inspector's built-in email pattern validation
    }
  }
};

router_cve_2021_21267.post('/index', (req, res) => {
  const input = req.body.input;
  const data = {
    email: input
  };

  schemaInspector.validate(validationSchema, data, function (err, result) {
    if (err) throw err;

    // If validation passes, result.valid will be true, otherwise false
    if (result.valid) {
      res.send("Regex matched successfully");
    } else {
      res.status(400).send("Regex did not match");
    }
  });
});

router_cve_2021_21267.post('/repair', (req, res) => {
  const input = req.body.input;
  const regex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|a[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/;
  result = regex.test(input);
  if (result) {
    res.send("Regex matched successfully");
  } else {
    res.status(400).send("Regex did not match");
  }
});

const validationSchema1 = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      pattern: 'email' // Uses schema-inspector's built-in email pattern validation
    }
  }
};

router_cve_2021_21267.post('/timeout', (req, res) => {
  const input = req.body.input;
  const data = {
    email: input
  };

  const validateWithTimeout = functionTimeout((callback) => {
    schemaInspector.validate(validationSchema, data, callback);
  }, 1000);

  validateWithTimeout((err, result) => {
    if (err && err.code === 'ETIMEDOUT') {
      res.status(408).send("Request timed out");
    } else if (err) {
      throw err;
    } else {
      // If validation passes, result.valid will be true, otherwise false
      if (result.valid) {
        res.send("Regex matched successfully");
      } else {
        res.status(400).send("Regex did not match");
      }
    }
  });
});

router_cve_2021_21267.post('/alternate_logic', (req, res) => {
  const input = req.body.input;
  const schema = z.object({
    email: z.string().email()
  });
  
  try {
    schema.parse({ email: input });
    res.send("Email is valid");
  } catch (e) {
    res.status(400).send("Invalid email");
  }
  
})

// router_cve_2021_21267.post('/timeout', async (req, res) => {
//   const input = req.body.input;

//   // function regexMatch(input) {
//   //   return new Promise((resolve, reject) => {
//   //     const data = {
//   //       email: input
//   //     };
//   //     schemaInspector.validate(validationSchema1, data, function (err, result) {
//   //       if (err) {
//   //         reject(err);
//   //       } else {
//   //         // If validation passes, result.valid will be true, otherwise false
//   //         if (result.valid) {
//   //           resolve(result.valid);
//   //         } else {
//   //           resolve(0);
//   //         }
//   //       }
//   //     });
//   //   });
//   // }
//   function regexMatch(input, callback) {
//     const data = {
//       email: input
//     };
//     schemaInspector.validate(validationSchema1, data, function (err, result) {
//       if (err) throw err;

//       if (result.valid) {
//         console.log("Regex matched successfully")
//         callback(result)
//       } else {
//         console.log("Regex did not match")
//         callback(null)
//       }
//     });
//   } //Original function

//   const regexMatchWithTimeout = functionTimeout(regexMatch, { timeout: 1000 });
//   try {
//     regexMatchWithTimeout(input, function (result) {

//       console.log("Callback received:", result);
//       res.send({ result });

//     });
//     // const result = regexMatchWithTimeout(input);
//     // console.log("Result:",result)
//     // res.send({ result });
//   } catch (error) {
//     console.error('Error:', error.message);
//     res.status(500).send({ error: 'Regex operation timed out or failed' });
//   }
//   // try {
//   //   const result = await regexMatchWithTimeout(input);
//   //   console.log("Result:", result);
//   //   res.send({ result });
//   // } catch (error) {
//   //   console.error('Error:', error.message);
//   //   res.status(500).send({ error: 'Regex operation timed out or failed' });
//   // }
// });

export default router_cve_2021_21267;